#!/usr/bin/python3

import gpxpy
import fitparse
import argparse

def semicircles_to_degrees(sc) -> float:
    degrees = sc * (180/2**31)
    return round(degrees, 8)

def parse_fit_to_gpx(fitname) -> gpxpy.gpx.GPX:
    fitfile = fitparse.FitFile(fitname)

    gpx = gpxpy.gpx.GPX()

    gpxTrack = gpxpy.gpx.GPXTrack()
    gpx.tracks.append(gpxTrack)

    gpxSegment = gpxpy.gpx.GPXTrackSegment()
    gpxTrack.segments.append(gpxSegment)

    for record in fitfile.get_messages("record"):
        gpxTrackPoint = gpxpy.gpx.GPXTrackPoint()

        for data in record.fields:
            if data.name == "position_long":
                gpxTrackPoint.longitude = semicircles_to_degrees(data.value)
            if data.name == "position_lat":
                gpxTrackPoint.latitude  = semicircles_to_degrees(data.value)
            if data.name == "timestamp":
                gpxTrackPoint.time      = data.value
            if data.name == "altitude":
                gpxTrackPoint.elevation = data.value

        if not (gpxTrackPoint.latitude and gpxTrackPoint.longitude):
            continue

        gpxSegment.points.append(gpxTrackPoint)

    return gpx


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="convert Garmin FIT files to GPX tracks")

    parser.add_argument("fitfile", help="fit file to read")
    parser.add_argument("-o", "--output", help="specify target file")
    parser.add_argument("-c", "--stdout", action="store_true", help="print GPX/XML to stdout")

    args = parser.parse_args()

    gpx = parse_fit_to_gpx(args.fitfile)

    if args.output:
        output_file = open(args.output, 'x')
        output_file.write(gpx.to_xml())

        output_file.close()

    elif args.stdout:
        print(gpx.to_xml())

    else:
        # omit ending *.fit and append .gpx instead
        if args.fitfile[-4:].lower() == ".fit":
            output_filename = args.fitfile[:-4] + ".gpx"
        else:
            output_filename = args.fitfile + ".gpx"

        output_file = open(output_filename, 'x')
        output_file.write(gpx.to_xml())

        output_file.close()
